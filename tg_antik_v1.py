import argparse
import asyncio
import re
from pathlib import Path

import python_socks
from telethon import TelegramClient, functions
from telethon.errors import (
    ChannelPrivateError,
    InviteHashInvalidError,
    InviteHashExpiredError,
    UserNotParticipantError, FloodWaitError
)
from telethon.tl.types import Channel, Chat

# -------------------------------------------------
# üîë –ó–ê–ü–û–õ–ù–ò–¢–ï –°–í–û–ò –î–ê–ù–ù–´–ï
API_ID = 492849829489          # ‚Üê –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π api_id (—á–∏—Å–ª–æ)
API_HASH = ""  # ‚Üê –≤–∞—à api_hash (—Å—Ç—Ä–æ–∫–∞)
SESSION_NAME = "session"

proxy=None # –õ—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏. –ü—Ä–∏–º–µ—Ä —É–∫–∞–∑–∞–Ω –Ω–∏–∂–µ.
# –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ —é–∑–∞—Ç—å
#proxy = {
#    'proxy_type': python_socks.ProxyType.HTTP, # (mandatory) protocol to use
#    'addr': '–≤–∞—à ip',      # (mandatory) proxy IP address
#    'port': 8080,           # (mandatory) proxy port number
#    'username': 'username',      # (optional) username if the proxy requires auth
#    'password': 'p@ssw0rd',      # (optional) password if the proxy requires auth
#    'rdns': True            # (optional) whether to use remote or local resolve, default remote
#}
# -------------------------------------------------

# –§–∞–π–ª—ã
RKN_PATH = Path("rkn.txt")
RKN_NUM_PATH = Path("rkn_num.txt")
VERIFIED_PATH = Path("verified.txt")
NOT_DEFINITELY_PATH = Path("others.txt")

# –†–µ–≥—É–ª—è—Ä–∫–∏ (–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞)
RKN_WORD_PATTERN = re.compile(
    r"\b(?:"
    r"—Ä–∫–Ω|"
    r"—Ä–µ–µ—Å—Ç—Ä[–∞–µ]?|"
    r"gosuslugi|"
    r"—Ä–æ—Å–∫–æ–º–Ω–∞–¥–∑–æ—Ä(?:–∞)?|"
    r"–ø–µ—Ä–µ—á–µ–Ω[–µ—è]?[–π—è]?|"
    r"rkn|"
    r"gov\.ru"
    r")\b:?",
    re.IGNORECASE,
)
RKN_NUM_PATTERN = re.compile(r"‚Ññ\s*[\d\w]{2,}", re.IGNORECASE)

# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
def normalize_input_link(link: str) -> str | None:
    link = link.strip()
    if not link:
        return None
    # Invite-—Å—Å—ã–ª–∫–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if "/+" in link or link.startswith("+"):
        if link.startswith("+"):
            return f"https://t.me/{link}"
        return link
    # –ò–∑–≤–ª–µ–∫–∞—é username
    orig = link
    if link.startswith(("https://", "http://")):
        link = link.split("://", 1)[1]
    for prefix in ["telegram.dog/", "telegram.me/", "t.me/s/", "t.me/"]:
        if link.startswith(prefix):
            link = link[len(prefix):]
    if link.startswith("@"):
        link = link[1:]
    link = link.split("/", 1)[0].split("?", 1)[0].split("#", 1)[0]
    if link and link.replace("_", "").replace("-", "").isalnum():
        return link
    else:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å: {orig}")
        return None

def clean_target(target: str) -> str | None:
    target = target.strip()
    if not target:
        return None
    # –£–±–∏—Ä–∞—é URL-–ø—Ä–µ—Ñ–∏–∫—Å—ã
    for prefix in [
        "https://t.me/s/",
        "http://t.me/s/",
        "https://t.me/",
        "http://t.me/",
        "https://telegram.me/",
        "https://telegram.dog/",
    ]:
        if target.startswith(prefix):
            username = target[len(prefix):]
            # –û–±—Ä–µ–∑–∞—é –≤—Å—ë –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Å–ª—ç—à–∞, –≤–æ–ø—Ä–æ—Å–∞ –∏ —Ç.–ø.
            username = username.split("/")[0].split("?")[0].split("#")[0].strip()
            if username and username.replace("_", "").replace("-", "").isalnum():
                return username
    # –ï—Å–ª–∏ –Ω–µ URL ‚Äî —Å—á–∏—Ç–∞—é, —á—Ç–æ —ç—Ç–æ —É–∂–µ username
    if target.replace("_", "").replace("-", "").isalnum():
        return target
    return None

async def get_channels_from_file() -> list[str]:
    input_path = Path("channels.txt")
    if not input_path.is_file():
        print("‚ùå –§–∞–π–ª channels.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []
    raw = [line.strip() for line in input_path.read_text(encoding="utf-8").splitlines() if line.strip()]
    targets = []
    for line in raw:
        target = normalize_input_link(line)
        if target:
            targets.append(target)
        else:
            print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Å—Å—ã–ª–∫–∞: {line}")
    return targets

async def get_subscribed_channels(client) -> list[str]:
    print("üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫...")
    dialogs = await client.get_dialogs(limit=None)
    targets = []
    for dialog in dialogs:
        ent = dialog.entity
        if isinstance(ent, Channel) and hasattr(ent, 'username') and ent.username:
            targets.append(ent.username)
        elif isinstance(ent, Channel):
            # –ö–∞–Ω–∞–ª –±–µ–∑ username ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º ID (–Ω–æ get_entity –Ω–µ –ø—Ä–∏–º–µ—Ç ID –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Å–ø–∏—Å–∫–∞)
            # –ü–æ—ç—Ç–æ–º—É –ø—Ä–æ–ø—É—Å–∫–∞—é ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –ø–æ username –∏–ª–∏ invite-—Å—Å—ã–ª–∫–µ
            pass
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(targets)} –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö")
    return targets

processed = set()

async def process_channel(client, target: str, f_rkn, f_num, f_ver, f_other, delay: float):
    if target in processed:
        return
    processed.add(target)

    try:
        entity = await client.get_entity(target)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
        real_name = getattr(entity, 'title', '') or getattr(entity, 'first_name', '') or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
        username = getattr(entity, 'username', None)
        if not username:
            print(f"‚ö†Ô∏è  {real_name} ‚Äî –Ω–µ—Ç username, –ø—Ä–æ–ø—É—Å–∫–∞—é")
            return

        display_name = f"{real_name} (@{username})" if username else f"{real_name} (ID: {entity.id})"

        is_channel = isinstance(entity, Channel)
        is_chat = isinstance(entity, Chat)

        if not (is_channel or is_chat):
            print(f"‚ÑπÔ∏è  {display_name} ‚Äî –Ω–µ –∫–∞–Ω–∞–ª –∏ –Ω–µ —á–∞—Ç, –ø—Ä–æ–ø—É—Å–∫–∞—é")
            return

        is_verified = False
        description = ""

        if is_channel:
            is_verified = bool(getattr(entity, 'verified', False))
            try:
                full = await client(functions.channels.GetFullChannelRequest(entity))
                description = full.full_chat.about or ""
            except (ChannelPrivateError, InviteHashInvalidError, InviteHashExpiredError):
                description = "üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª, –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        elif is_chat:
            try:
                full = await client(functions.messages.GetFullChatRequest(chat_id=entity.id))
                description = getattr(full.full_chat, 'about', "") or ""
            except Exception:
                description = ""

        # title = real_name or ""

        has_rkn_word =bool(RKN_WORD_PATTERN.search(description.lower()))
        has_rkn_num = bool(RKN_NUM_PATTERN.search(description))

        channel_type = 0

        if has_rkn_word and username:
            f_rkn.write(f"https://t.me/s/{username}\n")
            channel_type |= 1

        if has_rkn_num and username:
            f_num.write(f"https://t.me/s/{username}\n")
            channel_type |= 2

        if is_verified and username:
            f_ver.write(f"https://t.me/s/{username}\n")
            channel_type |= 4

        printed = False

        match channel_type:
            case 3:
                print(f"üî¥üü† {display_name} ‚Üí –†–µ–µ—Å—Ç—Ä + ‚Ññ (—Ç–æ–∂–µ –†–µ–µ—Å—Ç—Ä)")
                printed = True
            case 5:
                print(f"üî¥üîµ {display_name} ‚Üí –†–µ–µ—Å—Ç—Ä + –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
                printed = True
            case 6:
                print(f"üü†üîµ {display_name} ‚Üí ‚Ññ (—Ç–æ–∂–µ –†–µ–µ—Å—Ç—Ä) + –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
                printed = True
            case 7:
                print(f"üî¥üü†üîµ {display_name} ‚Üí –†–µ–µ—Å—Ç—Ä + ‚Ññ (—Ç–æ–∂–µ –†–µ–µ—Å—Ç—Ä) + –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
                printed = True
            case 0:
                print(f"‚ö™ {display_name} ‚Äî –Ω–µ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö (—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ A+)")
                if username:
                    f_other.write(f"https://t.me/s/{username}\n")
                printed = True

        if not printed:
            if channel_type & 1:
                print(f"üî¥ {display_name} ‚Üí –†–µ–µ—Å—Ç—Ä")
            if channel_type & 2:
                print(f"üü† {display_name} ‚Üí ‚Ññ (—Ç–æ–∂–µ –†–µ–µ—Å—Ç—Ä)")
            if channel_type & 4:
                print(f"üîµ {display_name} ‚Üí –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")

        await asyncio.sleep(delay)


    except FloodWaitError as e:
        print(f"‚è≥ Flood wait! –ñ–¥—ë–º {e.seconds} —Å–µ–∫—É–Ω–¥...")
        await asyncio.sleep(e.seconds)
        return

    except (InviteHashInvalidError, InviteHashExpiredError, ChannelPrivateError):
        print(f"üîí –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ø—Ä–∏–≤–∞—Ç–Ω—ã–π/–∏—Å—Ç—ë–∫): {target}")

    except Exception as exc:
        print(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {target}: {exc}")

async def unsubscribe_from_channels(client, targets: set[str], delay: float):
    if not targets:
        print("üì≠ –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏")
        return

    print(f"üóëÔ∏è  –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç {len(targets)} –∫–∞–Ω–∞–ª–æ–≤...")
    unsubscribed = 0
    for target in targets:
        target = clean_target(target)
        try:
            entity = await client.get_entity(target)
            if isinstance(entity, Channel):
                await client(functions.channels.LeaveChannelRequest(entity))
                print(f"‚úÖ –û—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç {target}")
                unsubscribed += 1
            else:
                print(f"‚ÑπÔ∏è  @{target} ‚Äî –Ω–µ –∫–∞–Ω–∞–ª, –ø—Ä–æ–ø—É—Å–∫–∞—é")
        except UserNotParticipantError:
            print(f"‚ÑπÔ∏è  @{target} ‚Äî –≤—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫, –ø—Ä–æ–ø—É—Å–∫–∞—é")
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç @{target}: {e}")
        await asyncio.sleep(delay)

    print(f"‚úîÔ∏è –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç {unsubscribed} –∫–∞–Ω–∞–ª–æ–≤")

def deduplicate_file(path: Path):
    if not path.is_file():
        return
    with open(path, "r", encoding="utf-8") as f:
        lines = f.readlines()

    seen = set()
    unique_lines = []
    for line in lines:
        stripped = line.strip()
        if stripped and stripped not in seen:
            seen.add(stripped)
            unique_lines.append(line)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª —Å \n

    with open(path, "w", encoding="utf-8") as f:
        f.writelines(unique_lines)

async def main():
    parser = argparse.ArgumentParser(
        prog='tg_antik',
        description="TG AntiK v1.1c rev.6 by Zalexanninev15 ‚Äî –ê–Ω–∞–ª–∏–∑ –∏ –æ—Ç–ø–∏—Å–∫–∞ –æ—Ç Telegram-–∫–∞–Ω–∞–ª–æ–≤",
        epilog="–ü—Ä–∏–º–µ—Ä—ã:\n"
               "  python tg_antik.py --list --save\n"
               "  python tg_antik.py --save --kill 0\n"
               "  python tg_antik.py --kill 3\n"
               "  python tg_antik.py --time 2.0",
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument('--list', action='store_true',
                        help='–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑ channels.txt (–≤–º–µ—Å—Ç–æ –ø–æ–¥–ø–∏—Å–æ–∫)')
    parser.add_argument('--save', action='store_true',
                        help='–î–æ–ø–∏—Å—ã–≤–∞—Ç—å –≤ —Ñ–∞–π–ª—ã, –Ω–µ –æ—á–∏—â–∞—è –∏—Ö (—Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)')
    parser.add_argument('--kill', type=int, choices=[0, 1, 2, 3],
                        help='–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞:\n'
                             '  0 ‚Äî –≤—Å—ë (–†–µ–µ—Å—Ç—Ä + –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω + ‚Ññ)\n'
                             '  1 ‚Äî —Ç–æ–ª—å–∫–æ –†–µ–µ—Å—Ç—Ä\n'
                             '  2 ‚Äî —Ç–æ–ª—å–∫–æ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω\n'
                             '  3 ‚Äî —Ç–æ–ª—å–∫–æ ‚Ññ (—Ç–æ–∂–µ –†–µ–µ—Å—Ç—Ä)')
    parser.add_argument('--time', type=float, default=2.0,
                        help='–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 2.0)')
    args = parser.parse_args()

    client = TelegramClient(SESSION_NAME, API_ID, API_HASH, proxy=proxy)
    await client.start()
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")

    # –≠—Ç–∞–ø 1: –ê–Ω–∞–ª–∏–∑
    need_analysis = (
        args.kill is None or
        args.list or
        not (RKN_PATH.exists() or RKN_NUM_PATH.exists() or VERIFIED_PATH.exists() or NOT_DEFINITELY_PATH.exists())
    )

    if need_analysis:
        if not args.save:
            RKN_PATH.write_text("", encoding="utf-8")
            RKN_NUM_PATH.write_text("", encoding="utf-8")
            VERIFIED_PATH.write_text("", encoding="utf-8")
            NOT_DEFINITELY_PATH.write_text("", encoding="utf-8")

        if args.list:
            print("üìÇ –†–µ–∂–∏–º: —á—Ç–µ–Ω–∏–µ –∏–∑ channels.txt")
            targets = await get_channels_from_file()
            targets = list(dict.fromkeys(targets))
        else:
            print("üì¨ –†–µ–∂–∏–º: –∞–Ω–∞–ª–∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫")
            targets = await get_subscribed_channels(client)

        if targets:
            print(f"üîé –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(targets)} –∫–∞–Ω–∞–ª–æ–≤...")
            with open(RKN_PATH, "a", encoding="utf-8") as f_rkn, \
                 open(RKN_NUM_PATH, "a", encoding="utf-8") as f_num, \
                 open(VERIFIED_PATH, "a", encoding="utf-8") as f_ver, \
                 open(NOT_DEFINITELY_PATH, "a", encoding="utf-8") as f_other:
                for target in targets:
                    await process_channel(client, target, f_rkn, f_num, f_ver, f_other, args.time)
		
            # –ò–∑–±–∞–≤–ª—è—é—Å—å –æ—Ç –¥—É–ø–ª–∏–∫–∞—Ç–æ–≤
            deduplicate_file(RKN_PATH)
            deduplicate_file(RKN_NUM_PATH)
            deduplicate_file(VERIFIED_PATH)
            deduplicate_file(NOT_DEFINITELY_PATH)
		
        else:
            print("‚ùå –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    else:
        print("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã")

    # –≠—Ç–∞–ø 2: –û—Ç–ø–∏—Å–∫–∞
    if args.kill is not None:
        print("\nüîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏...")

        def load_set(path):
            return {line.strip().lower() for line in path.read_text(encoding="utf-8").splitlines()} if path.is_file() else set()

        rkn = load_set(RKN_PATH)
        rkn_num = load_set(RKN_NUM_PATH)
        verified = load_set(VERIFIED_PATH)

        targets = set()
        if args.kill == 0:
            targets = rkn | rkn_num | verified
        elif args.kill == 1:
            targets = rkn
        elif args.kill == 2:
            targets = verified
        elif args.kill == 3:
            targets = rkn_num

        await unsubscribe_from_channels(client, targets, args.time)

    await client.disconnect()
    print("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    asyncio.run(main())
